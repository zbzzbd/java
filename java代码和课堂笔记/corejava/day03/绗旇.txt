1.JavaBean规范(POJO)
	符合以下规则的Class就可以成为JavaBean
	(1)在包内定义
	(2)有无参构造方法
	(3)有属性及对应的setter和getter方法
	(4)序列化 
	public class A implements Serialize{
	}
2.多态概念
	（1）父类型具有多态性，可以引用子类对象。
	（2）使用多态可以提高方法参数的灵活性。
	（3）使用多态的话，需要有继承关系
3.类型强制转换
	如果使用父类型引用子类对象，编译时会将子类新增方法和属性隐藏。
	因此需要强制转换为原有子类型。格式如下
	//判断s的原本类型是否为Circle
	if(s instanceof Circle){
			Circle c = (Circle)s;//强制转型
			c.f1();//调用Circle新增方法f1
	}
4.static关键字
	有static修饰的成员（即属性和方法）与类相关，没有static修饰的与对象相关。
	(1)修饰属性
		a.通过类名.调用
		b.该类的所有对象共享该属性。
		c.属性是在类加载器加载该类时分配空间
	(2)修饰方法
		a.通过类名.调用
		b.该方法内只能使用有static修饰的属性或方法
		c.方法内不能使用this,super关键字
	
	(3)修饰代码块
		a.是在类加载时执行，因为虚拟机对类只加载一次，
		  所以静态代码快只在第一次加载时执行。仅执行一次
5.final关键字
	(1)修饰类
		类为最终类，不能被继承。
	(2)修饰方法
		方法为最终方法，在子类中不允许被重写(覆盖)。
	(3)修饰属性
		属性值在赋值后，不允许被修改.
		定义属性时，如果加了final，必须显示给定初值，系统不能默认初始化。
6.定义常量格式
  public static final 类型 常量名 = 值;
  常量名注意全部大写
7.抽象类
  (1)抽象类概念
	a.抽象类只能作为父类使用，不能实例化。
	b.抽象类可以包含抽象方法，也可以不包含抽象方法。
	c.如果子类继承了抽象类，必须全部实现父类的抽象方法，
	d.否则子类得继续充当抽象类。
  (2)抽象方法
	a.在定义父类时，如果有些方法无法确定具体实现，可以定义成抽象方法。
	b.抽象方法格式如下：
	 修饰符 abstract 返回类型 方法名（参数列表）;
8.接口
	(1)概念
	接口是一种特殊的抽象类，其中只有常量和抽象方法的定义。
	(2)接口定义格式
		public interface 接口名 extends 接口1,接口2...{
			//常量定义
			//方法定义
		}
		注意：与类继承不同，接口允许多继承。
	(3)接口的使用
		public class 类名 implements 接口1,接口2...{
			//必须实现接口中的所有方法
			//否则该类必须是抽象类
		}
		
		//多态使用
		接口类型 变量 = new 接口实现类();
