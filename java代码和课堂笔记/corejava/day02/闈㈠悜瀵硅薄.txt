面向对象的特征有哪些方面  
 
抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不 用部分细节。抽象包括两个方面， 一是过程抽象， 二是数据抽象。

 继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用， 它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生， 这个过程称为类继承。新类继承了原始类的特性， 新类称为原始类的派生类（子类），而 原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。

 封装：封装是把过程和数据包围起来， 对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象， 这些对象通过一个受保护的接口访问其他对象。

 多态性：多态性是指允许不同 类的对象对同 一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同 名问题。



   2.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?
方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。



什么是类与对象？
所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。
类是具备某些共同特征的实体的集合，它是一种抽象的概念，用程序设计的语言来说，类是一种抽象的数据类型，它是对所具有相同特征实体的抽象。

属性与方法？
不同对象具有相同特点，就可能抽象为一定的类，那么这些特点基本上可以分为两类，一类是描述对象静态状态的，就是对象的属性，在程序设计中，可以称之为变量；另一类是描述对象的动作，就是对象的方法，在程序设计中我们称之为函数。属性和方法是一个对象所具备的两大基本要素，也是我们后面编程工作的核心。



1、作用域public,private,protected,以及不写时的区别
答：区别如下：
作用域           当前类       同一package             子孙类       其他package
public            √              √                   √            √
protected         √              √                   √            ×
friendly          √              √                   ×            ×
private           √              ×                   ×            ×


不写时默认为friendly


关于继承中的构造器：
1.子类构造器递归调用父类构造器；                class foo{
                                                  int a;

2.子类构造器默认调用父类无参数构造器！               foo(int a){
                                                   this.a=a;
                                                   }
                                                   }
3.如果父类没有无参数构造器，                     class goo extends foo{      
   就必须在子类中明确指定调用父类的有参数构造器！           public goo(){



4.使用super()调用父类构造器，                          super(1);
   必须写在子类构造器的第一行                              }
                                                       }