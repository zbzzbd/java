1.使用模版设计模式设计一个分页显示程序
 数据集合:String数组实现.
 要显示的当前页为int
 每一页要显示的大小为int
 使用示例：
 Emp emp = new Emp();
 emp.show(1,5);
 信息如下：
 ---当前页1/3---
 张1,张2,张3,张4,张5
 
 Dept dept = new Dept();
 dept.show(2,4);
 信息如下：
 ---当前页2/2---
 部门5,部门6,部门7,部门8
 =================================
 2.单例(子)模式
 	为了保障一个类，只能创建出一个对象，不能存在多个对象。
 ==============知识点=================
 设计模式１：模版模式
 	a.代码重复利用
 	b.如果业务的主要处理逻辑相同，局部子类实现不同，
 	　可以将这部分相同逻辑提到模版类中，模版类采用抽象类定义。
 	　不同实现部分放到子类实现。
 设计模式2：单子模式
 	为了保障一个类，只能创建出一个对象，不能存在多个对象。
 	实现步骤：
 	a.将构造方法私有，防止外界使用new + 构造方法()创建对象
 	b.提供一个静态返回当前类型对象的方法．
 	   第一次调用该方法时，调用new构造器创建对象，
 	   后续调用该方法时，将第一次创建的对象返回
 
 3.了解Object类及其API
 	(1)Object类是其他类的祖先类
 	(2)toString()、equals()、hashCode()
 		toString():返回对象的字符串表示。表示格式为包名.类名@hashCode值
 		equals():比较两个对象的内容是否"相等".Object采用了"=="作为该方法的实现。
 		hashCode():返回对象的hashCode值，该值是内存地址经过特殊运算得出。
 	如果上述3个方法不能满足需要，可以在类中重写。
 
 equals 方法在非空对象引用上实现相等关系： 

自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。 
对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。 
传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。 
一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。 
对于任何非空引用值 x，x.equals(null) 都应返回 false。 

注意：当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，
该协定声明相等对象必须具有相等的哈希码。 
