十进制, 逢十进一
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
...
 21 
 十进制
 数字: 0~9
 权: 10000 1000 100 10 1 = 10^4 10^3 10^2 10^1 10^0
 基数: 10 
  
 3467 = 3*1000 + 4*100 + 6*10 + 7*1
 
二进制, 逢二进一
 数字: 0 1
 权: 256 128  64  32  16   8   4   2   1  
    2^8  2^7 2^6 2^5 2^4 2^3 2^2 2^1 2^0
      0  0    1   0    0   0   0   0   1 = 65(10)
 基数: 2 
 
     权: 256 128  64  32  16   8   4   2   1  
             1    1   0   0   0   0   0   0
    192(10) = 11000000(2)
    
    148(10) = ?(2) 
    187(10) = ?(2)
    111(10) = ?(2)

      8421 
  0   0000
  1   0001
  2   0010
  3   0011
  4   0100
  5   0101
  6   0110
  7   0111
  8   1000
  9   1001
 10   1010
 11   1011
 12   1100
 13   1101
 14   1110
 15   1111
  
 补码规定: 高位为1的表示负数, 运算时多过4位的数舍弃(溢出)
          补码运算是封闭的, 符合四则(+-*/)运算的封闭性
 溢出有正向的作用也有副作用, 在工作中要加以合理利用和避免: 
   如: -1*-1 = 1(正作用)  7+1=-8(副作用)
  
 四位补码只能表示: -8~7, 不能表示超过范围的数字,超范围就溢出
 补码是一个变通的使用正数表示负数的方法, 本质就是正数的运算

 更大数字的使用4位以上的补码
 
 低级别的补码转换为高级别的补码: 正数高位补0, 负数高位补1
   目的是保证数值不变
 4位补码: 最小 -8 最大7  
 8位补码: 最小 -128 最大127
16位补码: -32768 32767
32位补码: 
64位补码: 
                      16位补码:
-32768                10000000 00000000
-32767                10000000 00000001
            --------  
                      32位补码:
min                   10000000 00000000 00000000 00000000                  
    4位补码  8位补码 
-128  ----  10000000
-127  ----  10000001
...   ...   ...
-10   ----  11110110
 -9   ----  11110111           
 -8   1000  11111000
 -7   1001  11111001
 -6   1010  11111010
 -5   1011  11111011
 -4   1100  11111100
 -3   1101  11111101  11111111 11111111 11111111 11111101
 -2   1110  11111110  11111111 11111111 11111111 11111110         
 -1   1111  11111111  11111111 11111111 11111111 11111111 
  0   0000  00000000  00000000 00000000 00000000 00000000
  1   0001  00000001  00000000 00000000 00000000 00000001
  2   0010  00000010  00000000 00000000 00000000 00000010
  3   0011  00000011  ...
  4   0100  00000100  
  5   0101  00000101
  6   0110  00000110
  7   0111  00000111  00000000 00000000 00000000 00000111
  8   ----  00001000  ...
  9   ----  00001001
  
 15   ----  00001111
...   ...   ...
126   ----  01111110
127   ----  01111111  00000000 00000000 00000000 01111111
128   ----  --------  00000000 00000000 00000000 10000000

max                   01111111 11111111 11111111 11111111
 
  -6  1010   
 + 6  0110
     111 
 ------------
   0  0000
  
  -6  1010  
+  2  0010
       1    
---------------
  -4  1100
  
  -1  1111
* -1  1111
---------------
      1111
     1111 
    1111  
   1111    
+    321    
---------------
  1   0001
  
计算机内部只有二进制的补码!
计算机不认识10进制
int age = 10; // 00000000 00000000 00000000 00001010
int t = -1; //11111111 11111111 11111111 11111111
  
为什么有16进制:二进制的简写形式,每4位二进制可以简写为1位16进制数
计算机内部没有16进制! 16进制是用来方便计算机工作人员简洁书写
   2进制数据的! 是二进制的简洁表示! 本质上16进制就是2进制

int min = 0x80000000;
int max = 0x7fffffff;//0111 1111 1111 1111 1111 1111 1111 1111

什么是16进制: 
  数字: 0~9 a b c d e f
  权: 256 16 1  
  基数: 16 
 (10)  (16)       (2)
   0     0      00000000
   1     1      00000001
   2     2      00000010
   3     3      00000011
   4     4      00000100
   5     5      00000101
   6     6      00000110
   7     7      00000111
   8     8      00001000
   9     9      00001001
  10     a      00001010
  11     b      00001011
  12     c      00001100
  13     d      00001101
  14     e      00001110
  15     f      00001111
  16    10      00010000
  17    11      00010001
  18    12      00010010
  ...   ...     ...
  65    41      01000001
  66    42      01000010
  ...   ...     ...
 127    7f      01111111
                84218421
 
  
  
  
  
  
  
  
  
   
   
   
   
     
 
 
  
  


