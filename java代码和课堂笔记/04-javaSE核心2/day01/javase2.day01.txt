Java SE 2 Day01
2012/2/1
====================
Java IO (Input/Output) 

文件系统的管理 (pwd ls rm move)

文件内容存取(访问) Access, 
	RamdomAccessFile

流式访问
	  可扩展的流
	  
	  ls /etc|grep ^pa


1 Java java.io.File 文件系统管理  (pwd ls mkdir rm )
 1) File类的用途: 用于表示文件(目录);只用于表示文件(目录)
  的信息(名称,大小等)不能对文件的内容进行访问
  File 代表文件系统中对文件/目录的管理操作(增删改查, CRUD)
 2) java.io.File基本API
  任务: A 检查当前文件夹中是否包含目录 demo
       B 如果没有demo, 就创建文件夹demo
       C 在demo 中 创建文件 test.txt
       D 显示demo 文件夹的内容.
       E 显示test.txt 的绝对路径名
       F 显示test.txt 的文件长度和创建时间
              
	File(String)
	long length()
	long lastModified()
	String getName()
	String getPath()
	boolean exists()
	boolean dir.isFile()
	boolean dir.isDirectory()
	boolean mkdir()
	boolean mkdirs()
	boolean delete();
	boolean createNewFile() throw IOException
	File[] listFile()

 3) 回调模式和FileFilter  (ls|grep patten)
	File[] listFile(FileFilter)
   A 任务: 列出 src/corejava/day07 中的.java文件

2  RandomAccessFile 操作文件内容, 访问文件任意位置

 16进制:41 对应: 0100 0001 是一个字节(byte)
 
 一个MP3歌曲大约 5M byte, 一个5M个Byte数据组成的有序集合
 
 一个文件8G个Byte
  
  文件是byte by byte 是数据有序集合
  
  基本的文件访问, 基于一个byte一个byte的读写文件
  
  byte数据是文件的基本组成单位, 是最小的原子单位.

 1)Java 文件模型, 文件是byte by byte 是数据集合
 data   :  41 42 00 00 00 ff d6 d0  ...
 index  :   0  1  2  3  4  5  6  7  8
 pointer:   ^ 
 
 2) 打开文件, 有两种模式 "rw", "r"
  RandomAccessFile raf = new RandomAccessFile(file, "rw");
  打开文件时候默认文件指针在开头 pointer=0
 
 3)写入方法: raf.write(int) 将整数的"低八位"写入到文件中, 指针
  自动移动到下一个位置, 准备再次写入
  
  * 文件名的扩展名要明确指定, 没有默认扩展名现象!
  
  任务: A 在demo文件夹中创建raf.dat
       B 打开这个文件
       C 写入 'A' 和 'B'
       D 写入整数 255 占用4个byte
       E 写入GBK 编码的 '中', d6d0
       
    File demo = new File("demo");
    if(!demo.exists()){
      demo.mkdir();
    }
    File file = new File(demo, "raf.dat");
    if(! file.exists()){
      file.createNewFile();
    }
    RandomAccessFile raf = 
      new RandomAccessFile(file,"rw");
    System.out.println(raf.getFilePointer()); //0
    raf.write('A');// 0041 -> 00000041 -> 41
    System.out.println(raf.getFilePointer());//1 
    raf.write('B');
    int i = 0x7fffffff;// 7f ff ff ff
    //raf.write(i>>>24);// i>>>24 00 00 00 7f 
    //raf.write(i>>>16);// i>>>16 00 00 7f ff
    //raf.write(i>>>8);//  i>>>8  00 7f ff ff
    //raf.write(i);//          i  7f ff ff ff
    raf.writeInt(i);
    String s = "中";//4e2d
    byte[] gbk = s.getBytes("gbk"); 
    //gbk = {d6, d0}
    raf.write(gbk);
    raf.close();
 
 4) 读取文件 
  int b = raf.read() 从文件中读取一个byte(8位) 填充到int
  的低八位, 高24位为0, 返回值范围正数: 0~255, 如果返回-1表示
  读取到了文件末尾! 每次读取后自动移动文件指针, 准备下次读取.
 
   任务1: A 只读打开文件, 移动到int数据位置
         B 连续读取4个byte, 拼接为int (反序列化)  
         
    RandomAccessFile raf = 
      new RandomAccessFile("demo/raf.dat", "r");
    int i = 0;
    raf.seek(2);//移动到int位置
    i = raf.readInt();
    System.out.println(Integer.toHexString(i));
    raf.close();      
         
 5) 文件读写完成以后一定关闭文件
 
RandomAccessFile 可以读写文件, 文件最基本的读写: read(), write()
每次读写一个byte, 其他的方法(readInt()等)都是基于这两个方法实现的.
文件的最基本访问方式就是 byte by byte\

RandomAccessFile 提供基本类型的序列化方法, 和反序列化方法
基本类型序列化方法 : writeInt() writeLong() writeDouble()...
基本类型反序列化方法:readInt() readLong() readDouble().

读取一个文件的前提: 是对这个文件有足够清晰的了解!了解到每个byte

3 序列化与基本类型序列化
  int ->  4 byte
  long -> 8 byte
  
  序列化: 将数据转换为 n个byte序列叫序列化: 数据 -> n byte 
    如: 0x7fffffff -> [ 7f ff ff ff ] 
  反序列化: 将n byte 转换为一个数据的过程 : n byte -> 数据
    如: [ 7f ff ff ff ]  -> 0x7fffffff 

  RandomAccessFile 提供 基本类型 的读写方法
  可以将基本类型序列化到文件 和 反序列化为数据
  
4 IO流 (InputStream, OutputStream)
 InputStream, OutputStream 都是抽象类
 InputStream 抽象了应用程序读取数据的方式
 OutputStream 抽象类应用程序写出数据的方式
 EOF = End of File = -1
 输入流基本方法:
 int b = in.read() 读取一个byte 无符号填充到int低八位,-1是EOF
 in.read(byte[] buf) 读取数据填充到buf中
 in.read(byte[] buf, int start, int size)读取数据填充到buf中
 in.skip(long n)
 in.close();
 输出流的基本方法: 
 out.write(int b) 写出一个byte到流 b的低八位写出
 out.write(byte[] buf) 将缓冲区buf都写入到流
 out.write(byte[] buf, int start, int size)将buf的一部分
 写到流中.
 out.flush() 清理缓冲
 out.close();
  
               InputStream        OutputStream
 文件(Byte 序列) --输入流--> 应用程序 --输出流--> 文件(Byte)
                   in.read()   out.write() 
    
5 文件输入流 FileInputStream 继承了InputStream
  FileInputStream 具体实现了在文件上读取数据
  
  任务1: 读取文件并且按照HEX输出, 每10 byte为一行
  任务2: 读取文件内容为一个byte数组
  任务3: 将byte数组内容按照HEX输出, 每10 byte为一行
  任务4: 将byte数组转换为hex字符串
  
6 文件输出流 FileOutputStream 继承了OutputStream
  FileOutputStream 实现了向文件中写出byte数据的方法
  
  任务: A 在demo文件夹中创建out.dat
       B 打开这个文件
       C 写入 'A' 和 'B'
       D 写入整数 255 占用4个byte
       E 写入GBK 编码的 '中', d6d0

9 文件复制实现与优化
 
               InputStream        OutputStream
 文件(Byte 序列) --输入流--> 应用程序 --输出流--> 文件(Byte)
                   in.read()   out.write() 
   
 作业 
  1 复习并且实现全部课题演示代码
  2 实现IOUtils中全部的方法
  3 实现IOUtils中扩展的方法
 
预习:
  1 Java 对象序列化
  2 Java 线程
  







      